#include <Wire.h>
#include <Zumo32U4.h>


Zumo32U4OLED display;

Zumo32U4ButtonA buttonA;
Zumo32U4ButtonB buttonB;
Zumo32U4ButtonC buttonC;
Zumo32U4LineSensors lineSensors;
Zumo32U4ProximitySensors proxSensors;


unsigned int lineSensorValues[];

//This determine the threshold of color
const uint16_t lineSensorThreshold = 800;

//Reverse speed
const uint16_t reverseSpeed = 200;

//Turn speed
const uint16_t turnSpeed = 200;

//Forward speed
const uint16_t forwardSpeed = 200;

//Veering speeds
const uint16_t veerSpeedLow = 0;
const uint16_t veerSpeedHigh = 225;

//Ram speed for when it detects a robot
const uint16_t rammingSpeed = 400;

//Reverse time
const uint16_t reverseTime = 200;

//Minimum scan time
const uint16_t scanTimeMin = 300;

//Max scan time
const uint16_t scanTime = 2200

//wait time
const uint16_t waitTime = 5000;

//Time for when the robot decides it is now pushing a robot if it 
//hasnt reached a border after that time it speeds up to ramming speed
const uint16_t stalemateTime = 3750;

//All the states the robot can be in
enum State
{
  StatePausing,
  StateWaiting,
  StateScanning,
  StateDriving,
  StateBacking,
};

State state = StatePausing;

enum Direction
{
  DirectionLeft,
  DirectionRight,
};

Direction scanDir = DirectionLeft;

//The amount of time it enters the current state
uint16_t stateStartTime;

//The amount of time it spent in the previous state
uint16_t displayTime;

//
bool justChangedState;

void setup() 
{
  lineSensors.initThreeSensors();
  proxSensors.initThreeSensors();

  changeState(StatePausing);
}

void loop() {
 
  bool buttonPress = buttonA.getSingleDebouncedPress();

  if (state == StatePausing)
   {
      justChangedState = false;
      display.print(F("Press A"));
    }

  if (displayIsStale(100))
    {
      displayUpdated();
      display.gotoXY(0, 1);
      display.print(readBatteryMillivolts());
    }

    if (buttonPress)
    {
      // Once button A is pressed go to the waiting state
      changeState(StateWaiting);
    }
    else if (state == StateWaiting)
  {
    // In this state we wait for a while and then move on to the
    // scanning state

    motors.setSpeeds(0, 0);

    uint16_t time = timeInThisState();

    if (time < waitTime)
    {
      // Show the remaining time we have to wait
      uint16_t timeLeft = waitTime - time;
      display.gotoXY(0, 0);
      display.print(timeLeft / 1000 % 10);
      display.print('.');
      display.print(timeLeft / 100 % 10);
    }
    else
    {
      // We have waited long enough  Start moving
      changeState(StateScanning);
    }
  
  }
  else if (state == StateBacking)
  {
    // In this state the robot drives in reverse

    if (justChangedState)
    {
      justChangedState = false;
      display.print(F("back"));
    }

    motors.setSpeeds(-reverseSpeed, -reverseSpeed);

    // After backing up for a certain amount of time start
    // scan
    if (timeInThisState() >= reverseTime)
    {
      changeState(StateScanning);
    }
    
   }
  else if (state == StateScanning)
  {
    // In this state the robot rotates in place and tries to find
    // its opponent

    if (justChangedState)
    {
      justChangedState = false;
      display.print(F("scan"));
    }

    if (scanDir == DirectionRight)
    {
      motors.setSpeeds(turnSpeed, -turnSpeed);
    }
    else
    {
      motors.setSpeeds(-turnSpeed, turnSpeed);
    }

    uint16_t time = timeInThisState();

    if (time > scanTimeMax)
    {
      // We have not seen anything for a while so start driving
      changeState(StateDriving);
    }
    else if (time > scanTimeMin)
    {
      // Read the proximity sensors If we detect anything is
      // in the front sensor then start driving forwards
      proxSensors.read();
      if (proxSensors.countsFrontWithLeftLeds() >= 2
        || proxSensors.countsFrontWithRightLeds() >= 2)
      {
        changeState(StateDriving);
      }
    }
  }

  else if (state == StateDriving)
  {
    // In this state drive forward while also looking for the
    // opponent using the proximity sensors and checking for the
    // border

  if (justChangedState)
    {
   justChangedState = false;
   display.print(F("drive"));
    }

   // Check for borders
   lineSensors.read(lineSensorValues);
   if (lineSensorValues[0] < lineSensorThreshold)
    {
   scanDir = DirectionRight;
   changeState(StateBacking);
    }
   if (lineSensorValues[2] < lineSensorThreshold)
    {
   scanDir = DirectionLeft;
   changeState(StateBacking);
    }

    
  // Read the proximity sensors to see if know where the
  // opponent is
  proxSensors.read();
  uint8_t sum = proxSensors.countsFrontWithRightLeds() + proxSensors.countsFrontWithLeftLeds();
  int8_t diff = proxSensors.countsFrontWithRightLeds() - proxSensors.countsFrontWithLeftLeds();

  if (sum >= 4 || timeInThisState() > stalemateTime)
    {
   // The front sensor is getting a strong signal or we have
   // been driving forward for a while now without seeing the
   // border either way there is probably a robot in front
   // and we should switch to ramming speed
   motors.setSpeeds(rammingSpeed, rammingSpeed);

  // Turn on the red LED when ramming
  ledRed(1);
    }
  else if (sum == 0)
    {
    // We don't see anything with the front sensor so just
    // keep driving forward also monitor the side sensors; if
    // they see an object then we want to switch to the scanning
   // state and turn torwards that object

      motors.setSpeeds(forwardSpeed, forwardSpeed);

      if (proxSensors.countsLeftWithLeftLeds() >= 2)
      {
   // Detected something to the left
     scanDir = DirectionLeft;
      changeState(StateScanning);
      }

      
      if (proxSensors.countsRightWithRightLeds() >= 2)
      {
   // Detected something to the right
      scanDir = DirectionRight;
      changeState(StateScanning);
      }

      ledRed(0);
    }
    else
    {
   // We see something with the front sensor but it is not a
   // strong reading

   if (diff >= 1)
      {
     // The right-side reading is stronger so veer to the right
     motors.setSpeeds(veerSpeedHigh, veerSpeedLow);
      }
      else if (diff <= -1)
     {
     // The left-side reading is stronger so veer to the left
    motors.setSpeeds(veerSpeedLow, veerSpeedHigh);
      }
      else
      {
     // Both readings are equal so just drive forward
     motors.setSpeeds(forwardSpeed, forwardSpeed);
      }
   ledRed(0);
    }
  }
}

// Gets the amount of time we have been in this state in
// milliseconds After 65535 milliseconds (65 seconds) this
// overflows to 0
uint16_t timeInThisState()
{
  return (uint16_t)(millis() - stateStartTime);
}

// Changes to a new state It also clears the display and turns off
// the LEDs so that the things the previous state were doing do
// not affect the feedback the user sees in the new state
void changeState(uint8_t newState)
{
  state = (State)newState;
  justChangedState = true;
  stateStartTime = millis();
  ledRed(0);
  ledYellow(0);
  ledGreen(0);
  display.clear();
  displayCleared = true;
}

// Returns true if the display has been cleared or the contents
// on it have not been updated in a while the time limit used
// to decide if the contents are staled is specified in
// milliseconds by the staleTime parameter
bool displayIsStale(uint16_t staleTime)
{
  return displayCleared || (millis() - displayTime) > staleTime;
}

// Any part of the code that uses displayIsStale to decide when
// to update the display should call this function when it updates the
// display
void displayUpdated()
{
  displayTime = millis();
  displayCleared = false;
}
